/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum RubyNodeType {
  Alias = 0,
  AndAsgn = 1,
  Send = 2,
  Str = 3,
  Begin = 4,
  Class = 5,
  Const = 6,
  Cbase = 7,
  Sym = 8,
  Undef = 9,
  Def = 10,
  Args = 11,
  Arg = 12,
  Mlhs = 13,
  Optarg = 14,
  Lvar = 15,
  Restarg = 16,
  Kwarg = 17,
  Kwoptarg = 18,
  Kwrestarg = 19,
  Blockarg = 20,
  Defs = 21,
  RubySelf = 22,
  Int = 23,
  Module = 24,
  SClass = 25,
  Casgn = 26,
  ForwardArg = 27,
  Kwnilarg = 28,
  Preexe = 29,
  Postexe = 30,
  File = 31,
  Line = 32,
  Encoding = 33,
  True = 34,
  False = 35,
  Nil = 36
}
export interface Alias {
  typeName: 'Alias'
  to: RubyNode
  from: RubyNode
  keywordL: Loc
  expressionL: Loc
}
export interface AndAsgn {
  typeName: 'AndAsgn'
  recv: RubyNode
  value: RubyNode
  operatorL: Loc
  expressionL: Loc
}
export interface Send {
  typeName: 'Send'
  recv?: RubyNode | undefined
  methodName: string
  args: Array<RubyNode>
  dotL?: Loc
  selectorL?: Loc
  beginL?: Loc
  endL?: Loc
  operatorL?: Loc
  expressionL: Loc
}
export interface Str {
  typeName: 'Str'
  value: Bytes
  beginL?: Loc
  endL?: Loc
  expressionL: Loc
}
export interface Begin {
  typeName: 'Begin'
  statements: RubyNode[]
  beginL?: Loc
  endL?: Loc
  expressionL: Loc
}
export interface Class {
  typeName: 'Class'
  name: RubyNode
  superclass?: RubyNode | undefined
  body?: RubyNode | undefined
  keywordL: Loc
  operatorL?: Loc
  endL: Loc
  expressionL: Loc
}
export interface Const {
  typeName: 'Const'
  scope?: RubyNode | undefined
  name: string
  doubleColonL?: Loc
  nameL: Loc
  expressionL: Loc
}
export interface Cbase {
  typeName: 'Cbase'
  expressionL: Loc
}
export interface Sym {
  typeName: 'Sym'
  name: Bytes
  beginL?: Loc
  endL?: Loc
  expressionL: Loc
}
export interface Undef {
  typeName: 'Undef'
  names: RubyNode[]
  keywordL: Loc
  expressionL: Loc
}
export interface Def {
  typeName: 'Def'
  name: string
  args?: RubyNode | undefined
  body?: NapiBox
  keywordL: Loc
  nameL: Loc
  endL?: Loc
  assignmentL?: Loc
  expressionL: Loc
}
export interface Args {
  typeName: 'Args'
  args: Array<RubyNode>
  expressionL: Loc
  beginL?: Loc
  endL?: Loc
}
export interface Arg {
  typeName: 'Arg'
  name: string
  expressionL: Loc
}
export interface Mlhs {
  typeName: 'Mlhs'
  items: RubyNode[]
  beginL?: Loc
  endL?: Loc
  expressionL: Loc
}
export interface Optarg {
  typeName: 'Optarg'
  name: string
  default: RubyNode
  nameL: Loc
  operatorL: Loc
  expressionL: Loc
}
export interface Lvar {
  typeName: 'Lvar'
  name: string
  expressionL: Loc
}
export interface Restarg {
  typeName: 'Restarg'
  name?: string
  operatorL: Loc
  nameL?: Loc
  expressionL: Loc
}
export interface Kwarg {
  typeName: 'Kwarg'
  name: string
  nameL: Loc
  expressionL: Loc
}
export interface Kwoptarg {
  typeName: 'Kwoptarg'
  name: string
  default: RubyNode
  nameL: Loc
  expressionL: Loc
}
export interface Kwrestarg {
  typeName: 'Kwrestarg'
  name?: string
  operatorL: Loc
  nameL?: Loc
  expressionL: Loc
}
export interface Blockarg {
  typeName: 'Blockarg'
  name?: string
  operatorL: Loc
  nameL?: Loc
  expressionL: Loc
}
export interface Defs {
  typeName: 'Defs'
  definee: RubyNode
  name: string
  args?: RubyNode | undefined
  body?: RubyNode | undefined
  keywordL: Loc
  operatorL: Loc
  nameL: Loc
  assignmentL?: Loc
  endL?: Loc
  expressionL: Loc
}
export interface RubySelf {
  typeName: 'RubySelf'
  expressionL: Loc
}
export interface Int {
  typeName: 'Int'
  value: string
  operatorL?: Loc
  expressionL: Loc
}
export interface Module {
  typeName: 'Module'
  name: RubyNode
  body?: RubyNode | undefined
  keywordL: Loc
  endL: Loc
  expressionL: Loc
}
export interface SClass {
  typeName: 'SClass'
  expr: RubyNode
  body?: RubyNode | undefined
  keywordL: Loc
  operatorL: Loc
  endL: Loc
  expressionL: Loc
}
export interface Casgn {
  typeName: 'Casgn'
  scope?: RubyNode | undefined
  name: string
  value?: RubyNode | undefined
  doubleColonL?: Loc
  nameL: Loc
  operatorL?: Loc
  expressionL: Loc
}
export interface ForwardArg {
  typeName: 'ForwardArg'
  expressionL: Loc
}
export interface Kwnilarg {
  typeName: 'Kwnilarg'
  nameL: Loc
  expressionL: Loc
}
export interface Preexe {
  typeName: 'Preexe'
  body?: RubyNode | undefined
  keywordL: Loc
  beginL: Loc
  endL: Loc
  expressionL: Loc
}
export interface Postexe {
  typeName: 'Postexe'
  body?: RubyNode | undefined
  keywordL: Loc
  beginL: Loc
  endL: Loc
  expressionL: Loc
}
export interface File {
  typeName: 'File'
  expressionL: Loc
}
export interface Line {
  typeName: 'Line'
  expressionL: Loc
}
export interface Encoding {
  typeName: 'Encoding'
  expressionL: Loc
}
export interface True {
  typeName: 'True'
  expressionL: Loc
}
export interface False {
  typeName: 'False'
  expressionL: Loc
}
export interface Nil {
  typeName: 'Nil'
  expressionL: Loc
}
export interface Bytes {
  /** Raw vector of bytes */
  raw: Array<number>
}
export interface Loc {
  begin: number
  end: number
}
export function parse(text: string): RubyNode

type RubyNode = Alias | AndAsgn | Send | Str | Begin | Class | Const | Cbase | Sym | Undef | Def | Args | Arg | Mlhs | Optarg | Lvar | Restarg | Kwarg | Kwoptarg | Kwrestarg | Blockarg | Defs | RubySelf | Int | Module | SClass | Casgn | ForwardArg | Kwnilarg | Preexe | Postexe | File | Line | Encoding | True | False | Nil